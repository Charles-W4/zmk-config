

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// | GRAVE |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   | DEL   |
// | ESC   |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BSPC  |
// | TAB   |  A  |  S  |  D   |SHFT/F|  G   |                   |  H   | SHFT/J|  K    |  L   |   ;   |   '   |
// | SHIFT |  Z  |  X  |  C   |  V   |  B   |                   |  N   |  M    |  ,    |  .   |   /   | SHIFT |
//                     | ALT  | LOWER| SPACE|                   | ENTER| RAISE |  CTRL  |
            bindings = <
&kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4      &kp N5               &kp N6  &kp N7      &kp N8    &kp N9  &kp N0   &kp DEL
&kp ESC   &kp Q  &kp W  &kp E  &kp R       &kp T                &kp Y   &kp U       &kp I     &kp O   &kp P    &kp BSPC
&kp TAB   &kp A  &kp S  &kp D  &mt LSHFT F &kp G                &kp H   &mt RSHFT J &kp K     &kp L   &kp SEMI &kp SQT
&kp LSHFT &kp Z  &kp X  &kp C  &kp V       &kp B                &kp N   &kp M       &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                        &kp LALT &mo 2     &kp SPACE            &kp RET &mo 1       &kp RCTRL
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans &trans       &trans    &trans        &trans            &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
&trans  &none  &kp LC(LEFT) &kp UP    &kp LC(RIGHT) &kp PG_UP         &none      &kp home     &kp end      &kp F10      &none        &kp bksp
&trans  &none  &kp LEFT     &kp DOWN  &kp RIGHT     &kp PG_DN         &kp RGUI   &kp RSHIFT   &kp RCTRL    &kp RGUI(L)  &none        &kp del
&trans  &none  &trans       &trans    &trans        &trans            &none      &none        &none        &kp DOT      &none        &none
                            &trans    &trans        &trans            &trans     &trans       &trans
            >;
        };

        num_layer {
            bindings = <
&trans    &trans &trans &trans  &trans    &trans                       &trans      &trans    &trans    &trans   &trans    &trans 
&trans    &kp N1 &kp N2 &kp N3  &kp N4    &kp N5                       &kp N6      &kp N7    &kp N8    &kp N9   &kp N0    &trans
&trans    &none  &none  &none   &kp LSHFT &none                        &trans      &kp RSHFT &kp DOWN  &kp UP   &trans    &trans
&trans    &none  &none  &none   &none     &none                        &none       &none     &kp COMMA &kp DOT  &kp FSLH  &trans
                        &trans  &trans    &trans                       &trans      &trans      &trans
            >;
        };

        func_layer {
            bindings = <
&trans    &trans   &trans   &trans   &trans   &trans                 &trans        &trans       &trans         &trans        &trans    &kp DEL
&kp F1    &kp F2   &kp F3   &kp F4   &kp F5   &kp F6                 &kp LS(MINUS) &kp MINUS    &kp EQUAL      &kp LS(EQUAL) &kp N0    &kp BSPC
&kp F7    &kp F8   &kp F9   &kp F10  &kp F11  &kp F12                &none         &kp LEFT     &kp DOWN       &kp BSLH      &none     &none
&none     &none    &none    &none    &none    &none                  &none         &kp LS(LBKT) &kp LS(RBKT)   &kp LS(BSLH)  &none     &none
                            &trans   &trans   &trans                 &trans        &trans       &trans
            >;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};